# LEGACY: This workflow is deprecated. Use deploy-terraform.yml instead.
name: Deploy to AWS ECS

on:
  # push:
  #   branches: [main]
  workflow_dispatch:
    inputs:
      confirm_legacy:
        description: 'Type "LEGACY" to confirm you want to run the legacy deployment'
        required: true
        default: 'NO'

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: autovisionai

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup secrets in AWS Secrets Manager
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        WANDB_ENTITY: ${{ secrets.WANDB_ENTITY }}
      run: |
        chmod +x deploy/aws/setup-secrets.sh
        ./deploy/aws/setup-secrets.sh

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push main application image
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # Build and push MLflow image
        docker build -f docker/Dockerfile.mlflow -t $ECR_REGISTRY/$ECR_REPOSITORY:mlflow .
        docker build -f docker/Dockerfile.mlflow -t $ECR_REGISTRY/$ECR_REPOSITORY:mlflow-$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mlflow
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mlflow-$IMAGE_TAG

        # Build and push TensorBoard image
        docker build -f docker/Dockerfile.tensorboard -t $ECR_REGISTRY/$ECR_REPOSITORY:tensorboard .
        docker build -f docker/Dockerfile.tensorboard -t $ECR_REGISTRY/$ECR_REPOSITORY:tensorboard-$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:tensorboard
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:tensorboard-$IMAGE_TAG

    - name: Register ECS task definitions
      run: |
        aws ecs register-task-definition --cli-input-json file://deploy/aws/api_task_definition.json
        aws ecs register-task-definition --cli-input-json file://deploy/aws/ui_task_definition.json
        aws ecs register-task-definition --cli-input-json file://deploy/aws/mlflow_task_definition.json
        aws ecs register-task-definition --cli-input-json file://deploy/aws/tensorboard_task_definition.json

    - name: Create or Update ECS services
      run: |
        # Function to create service if it doesn't exist, otherwise update it
        create_or_update_service() {
          local service_name=$1
          local task_definition=$2

          # Check if service exists
          if aws ecs describe-services --cluster autovisionai --services $service_name --region $AWS_REGION --query 'services[0].serviceName' --output text 2>/dev/null | grep -q "$service_name"; then
            echo "Service $service_name exists, updating..."
            aws ecs update-service --cluster autovisionai --service $service_name --task-definition $task_definition --region $AWS_REGION
          else
            echo "Service $service_name does not exist, creating..."
            aws ecs create-service \
              --cluster autovisionai \
              --service-name $service_name \
              --task-definition $task_definition \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0e522b325a73bdf85,subnet-085cfe6f7532f5f14],securityGroups=[ sg-0028aa6bb51011b34],assignPublicIp=ENABLED}" \
              --region $AWS_REGION
          fi
        }

        # Create or update all services
        create_or_update_service "autovision-api" "autovision-api"
        create_or_update_service "autovision-ui" "autovision-ui"
        create_or_update_service "autovision-mlflow" "autovision-mlflow"
        create_or_update_service "autovision-tensorboard" "autovision-tensorboard"
